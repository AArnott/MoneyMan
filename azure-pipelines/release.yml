trigger: none # We only want to trigger manually or based on resources
pr: none

resources:
  pipelines:
  - pipeline: CI
    source: MoneyMan
    trigger:
      tags:
      - auto-release

stages:
- stage: releasify
  displayName: squirrel releasify
  jobs:
  - job:
    pool: Hosted Windows 2019 with VS2019
    variables:
      channel: prerelease
      RID: win-x64
      SquirrelVersion: 2.0.2-netcore
    steps:
    - powershell: Write-Host "##vso[build.updatebuildnumber]$(resources.pipeline.CI.runName)"
      displayName: Set pipeline name
    - download: CI
      artifact: variables-Windows
      displayName: Download pipeline variables
    - powershell: $(Pipeline.Workspace)/CI/variables-Windows/_pipelines.ps1
      displayName: Applying pipeline variables
    - download: CI
      artifact: deployables-Windows
      displayName: Download Squirrel input package
      patterns: 'deployables-Windows/SquirrelInputs/Nerdbank.MoneyMan.$(RID).$(NUGETPACKAGEVERSION).nupkg'
    - task: NuGetToolInstaller@1
      displayName: Use NuGet 5.x
      inputs:
        versionSpec: 5.x
    - powershell: |
        nuget install Squirrel.Windows -Version $(SquirrelVersion) -OutputDirectory $(Agent.TempDirectory)\Squirrel -PackageSaveMode nuspec -ExcludeVersion -NonInteractive -Verbosity Quiet
        $SquirrelTools = "$(Agent.TempDirectory)\Squirrel\squirrel.windows\tools"
        Write-Host Downloading release info
        & "$SquirrelTools\SyncReleases" -r "$(Build.StagingDirectory)\s3"  -u https://moneyman-releases.s3.us-west-1.amazonaws.com/$(channel)/$(RID)
        $input = "$(Pipeline.Workspace)/CI/deployables-Windows/SquirrelInputs/Nerdbank.MoneyMan.$(RID).$(NUGETPACKAGEVERSION).nupkg"
        Write-Host "Preparing $input for release"
        & "$SquirrelTools\Squirrel" -r "$(Build.StagingDirectory)\s3" --no-msi --releasify $input
        ren $(Build.StagingDirectory)\s3\Setup.exe $(Build.StagingDirectory)\s3\Nerdbank.MoneyMan.Setup.exe -Force
      displayName: squirrel --releasify
    - publish: $(Build.StagingDirectory)/s3
      artifact: squirrelInstaller
      displayName: Publishing installer as a pipeline artifact
    - task: S3Upload@1
      displayName: Uploading release to S3
      inputs:
        awsCredentials: AWS OSS AZP user
        regionName: us-west-1
        bucketName: moneyman-releases
        sourceFolder: $(Build.StagingDirectory)\s3
        globExpressions: |
          RELEASES
          Nerdbank.MoneyMan.Setup.exe
          Nerdbank.MoneyMan.$(RID)-$(NUGETPACKAGEVERSION)-*.nupkg
        targetFolder: $(channel)/$(RID)/
        filesAcl: public-read

- stage: GitHubRelease
  displayName: GitHub Release
  jobs:
  - deployment: create
    pool:
      vmImage: ubuntu-latest
    environment: No-Approval
    strategy:
      runOnce:
        deploy:
          steps:
          - task: GitHubRelease@1
            displayName: GitHub release (create)
            inputs:
              gitHubConnection: github.com_AArnott_OAuth
              repositoryName: $(Build.Repository.Name)
              target: $(resources.pipeline.CI.sourceCommit)
              tagSource: userSpecifiedTag
              tag: v$(resources.pipeline.CI.runName)
              title: v$(resources.pipeline.CI.runName)
              isDraft: true # After running this step, visit the new draft release, edit, and publish.
              changeLogCompareToRelease: lastNonDraftRelease
              changeLogType: issueBased
              changeLogLabels: |
                [
                  { "label" : "bug", "displayName" : "Fixes", "state" : "closed" },
                  { "label" : "enhancement", "displayName": "Enhancements", "state" : "closed" }
                ]

- stage: nuget_org
  displayName: nuget.org
  dependsOn: GitHubRelease
  condition: false # Suppress until it's worth sharing
  jobs:
  - deployment: push
    pool:
      vmImage: ubuntu-latest
    environment: No-Approval
    strategy:
      runOnce:
        deploy:
          steps:
          - download: CI
            artifact: deployables-Windows
            displayName: Download deployables-Windows artifact
            patterns: 'deployables-Windows/NuGet/*'
          - task: NuGetToolInstaller@1
            displayName: Use NuGet 5.x
            inputs:
              versionSpec: 5.x
          - task: NuGetCommand@2
            displayName: NuGet push
            inputs:
              command: push
              packagesToPush: $(Pipeline.Workspace)/CI/deployables-Windows/NuGet/*.nupkg
              nuGetFeedType: external
              publishFeedCredentials: nuget.org
